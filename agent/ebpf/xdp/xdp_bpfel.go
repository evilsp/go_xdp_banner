// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package xdp

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
	"xdp-banner/agent/ebpf/xdp/types"
)

/*
type xdpBanruleKey struct {
	Lpm struct {
		Prefixlen uint32
		Data      [0]uint8
	}
	Pad1     uint16
	Pad2     uint8
	Protocol uint8
	Identity uint32
	Sport    uint16
	Dport    uint16
}
*/
type xdpBanruleKey struct {
	Prefixlen uint32
	Pad1     uint16
	Pad2     uint8
	Protocol uint8
	Identity uint32
	Sport    uint16
	Dport    uint16
}

type xdpBanruleVal struct {
	LatestAccessTimestamp uint64
	RefuseTimes           uint64
}

type xdpIdentityInfo struct{ Identity uint32 }

/*
type xdpIpcacheKey struct {
	LpmKey struct {
		Prefixlen uint32
		Data      [0]uint8
	}
	Pad1   uint16
	Pad2   uint8
	Family uint8
	Ip4    struct {
		Ip4  uint32
		Pad3 uint32
		Pad4 uint32
		Pad5 uint32
	}
}
*/

type xdpIpcacheKey struct {
	Prefixlen uint32
	Pad1   uint16
	Pad2   uint8
	Family uint8
	// represents both IPv6 and IPv4 (in the lowest four bytes)
	IP types.IPv6
}


// loadXdp returns the embedded CollectionSpec for xdp.
func loadXdp() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_XdpBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdp: %w", err)
	}

	return spec, err
}

// loadXdpObjects loads xdp and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xdpObjects
//	*xdpPrograms
//	*xdpMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdpObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdp()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdpSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpSpecs struct {
	xdpProgramSpecs
	xdpMapSpecs
	xdpVariableSpecs
}

// xdpProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpProgramSpecs struct {
	CilXdpEntry *ebpf.ProgramSpec `ebpf:"cil_xdp_entry"`
}

// xdpMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpMapSpecs struct {
	IdentityIpcache  *ebpf.MapSpec `ebpf:"identity_ipcache"`
	PkgCountMetrics  *ebpf.MapSpec `ebpf:"pkg_count_metrics"`
	XdpBannerBanlist *ebpf.MapSpec `ebpf:"xdp_banner_banlist"`
}

// xdpVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpVariableSpecs struct {
}

// xdpObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpObjects struct {
	xdpPrograms
	xdpMaps
	xdpVariables
}

func (o *xdpObjects) Close() error {
	return _XdpClose(
		&o.xdpPrograms,
		&o.xdpMaps,
	)
}

// xdpMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpMaps struct {
	IdentityIpcache  *ebpf.Map `ebpf:"identity_ipcache"`
	PkgCountMetrics  *ebpf.Map `ebpf:"pkg_count_metrics"`
	XdpBannerBanlist *ebpf.Map `ebpf:"xdp_banner_banlist"`
}

func (m *xdpMaps) Close() error {
	return _XdpClose(
		m.IdentityIpcache,
		m.PkgCountMetrics,
		m.XdpBannerBanlist,
	)
}

// xdpVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadXdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpVariables struct {
}

// xdpPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpPrograms struct {
	CilXdpEntry *ebpf.Program `ebpf:"cil_xdp_entry"`
}

func (p *xdpPrograms) Close() error {
	return _XdpClose(
		p.CilXdpEntry,
	)
}

func _XdpClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdp_bpfel.o
var _XdpBytes []byte
