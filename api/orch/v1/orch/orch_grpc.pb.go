// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: orch/v1/orch/orch.proto

package orch

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrchService_GetInfo_FullMethodName  = "/orch.OrchService/GetInfo"
	OrchService_ListInfo_FullMethodName = "/orch.OrchService/ListInfo"
)

// OrchServiceClient is the client API for OrchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Agent Control Service
type OrchServiceClient interface {
	// Get the info of an orch
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// List the info of all orchs
	ListInfo(ctx context.Context, in *ListInfoRequest, opts ...grpc.CallOption) (*ListInfoResponse, error)
}

type orchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchServiceClient(cc grpc.ClientConnInterface) OrchServiceClient {
	return &orchServiceClient{cc}
}

func (c *orchServiceClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, OrchService_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchServiceClient) ListInfo(ctx context.Context, in *ListInfoRequest, opts ...grpc.CallOption) (*ListInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInfoResponse)
	err := c.cc.Invoke(ctx, OrchService_ListInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchServiceServer is the server API for OrchService service.
// All implementations must embed UnimplementedOrchServiceServer
// for forward compatibility.
//
// Agent Control Service
type OrchServiceServer interface {
	// Get the info of an orch
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// List the info of all orchs
	ListInfo(context.Context, *ListInfoRequest) (*ListInfoResponse, error)
	mustEmbedUnimplementedOrchServiceServer()
}

// UnimplementedOrchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrchServiceServer struct{}

func (UnimplementedOrchServiceServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedOrchServiceServer) ListInfo(context.Context, *ListInfoRequest) (*ListInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInfo not implemented")
}
func (UnimplementedOrchServiceServer) mustEmbedUnimplementedOrchServiceServer() {}
func (UnimplementedOrchServiceServer) testEmbeddedByValue()                     {}

// UnsafeOrchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchServiceServer will
// result in compilation errors.
type UnsafeOrchServiceServer interface {
	mustEmbedUnimplementedOrchServiceServer()
}

func RegisterOrchServiceServer(s grpc.ServiceRegistrar, srv OrchServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrchService_ServiceDesc, srv)
}

func _OrchService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchService_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchServiceServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchService_ListInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchServiceServer).ListInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchService_ListInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchServiceServer).ListInfo(ctx, req.(*ListInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrchService_ServiceDesc is the grpc.ServiceDesc for OrchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orch.OrchService",
	HandlerType: (*OrchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _OrchService_GetInfo_Handler,
		},
		{
			MethodName: "ListInfo",
			Handler:    _OrchService_ListInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orch/v1/orch/orch.proto",
}
