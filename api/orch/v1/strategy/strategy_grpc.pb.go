// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: orch/v1/strategy/strategy.proto

package strategy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StrategyService_AddStrategy_FullMethodName          = "/strategy.StrategyService/AddStrategy"
	StrategyService_UpdateStrategy_FullMethodName       = "/strategy.StrategyService/UpdateStrategy"
	StrategyService_DeleteStrategy_FullMethodName       = "/strategy.StrategyService/DeleteStrategy"
	StrategyService_GetStrategy_FullMethodName          = "/strategy.StrategyService/GetStrategy"
	StrategyService_ListStrategy_FullMethodName         = "/strategy.StrategyService/ListStrategy"
	StrategyService_ApplyStrategy_FullMethodName        = "/strategy.StrategyService/ApplyStrategy"
	StrategyService_GetRunningApplied_FullMethodName    = "/strategy.StrategyService/GetRunningApplied"
	StrategyService_ListRunningApplied_FullMethodName   = "/strategy.StrategyService/ListRunningApplied"
	StrategyService_GetHistoryApplied_FullMethodName    = "/strategy.StrategyService/GetHistoryApplied"
	StrategyService_ListHistoryApplied_FullMethodName   = "/strategy.StrategyService/ListHistoryApplied"
	StrategyService_DeleteHistoryApplied_FullMethodName = "/strategy.StrategyService/DeleteHistoryApplied"
)

// StrategyServiceClient is the client API for StrategyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StrategyServiceClient interface {
	AddStrategy(ctx context.Context, in *Strategy, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateStrategy(ctx context.Context, in *Strategy, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteStrategy(ctx context.Context, in *DeleteStrategyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetStrategy(ctx context.Context, in *GetStrategyRequest, opts ...grpc.CallOption) (*Strategy, error)
	ListStrategy(ctx context.Context, in *ListStrategyRequest, opts ...grpc.CallOption) (*ListStrategyResponse, error)
	ApplyStrategy(ctx context.Context, in *ApplyStrategyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRunningApplied(ctx context.Context, in *GetRunningAppliedRequest, opts ...grpc.CallOption) (*Applied, error)
	ListRunningApplied(ctx context.Context, in *ListRunningAppliedRequest, opts ...grpc.CallOption) (*ListRunningAppliedResponse, error)
	GetHistoryApplied(ctx context.Context, in *GetHistoryAppliedRequest, opts ...grpc.CallOption) (*Applied, error)
	ListHistoryApplied(ctx context.Context, in *ListHistoryAppliedRequest, opts ...grpc.CallOption) (*ListHistoryAppliedResponse, error)
	DeleteHistoryApplied(ctx context.Context, in *DeleteHistoryAppliedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type strategyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStrategyServiceClient(cc grpc.ClientConnInterface) StrategyServiceClient {
	return &strategyServiceClient{cc}
}

func (c *strategyServiceClient) AddStrategy(ctx context.Context, in *Strategy, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StrategyService_AddStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) UpdateStrategy(ctx context.Context, in *Strategy, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StrategyService_UpdateStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) DeleteStrategy(ctx context.Context, in *DeleteStrategyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StrategyService_DeleteStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) GetStrategy(ctx context.Context, in *GetStrategyRequest, opts ...grpc.CallOption) (*Strategy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Strategy)
	err := c.cc.Invoke(ctx, StrategyService_GetStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) ListStrategy(ctx context.Context, in *ListStrategyRequest, opts ...grpc.CallOption) (*ListStrategyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStrategyResponse)
	err := c.cc.Invoke(ctx, StrategyService_ListStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) ApplyStrategy(ctx context.Context, in *ApplyStrategyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StrategyService_ApplyStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) GetRunningApplied(ctx context.Context, in *GetRunningAppliedRequest, opts ...grpc.CallOption) (*Applied, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Applied)
	err := c.cc.Invoke(ctx, StrategyService_GetRunningApplied_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) ListRunningApplied(ctx context.Context, in *ListRunningAppliedRequest, opts ...grpc.CallOption) (*ListRunningAppliedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRunningAppliedResponse)
	err := c.cc.Invoke(ctx, StrategyService_ListRunningApplied_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) GetHistoryApplied(ctx context.Context, in *GetHistoryAppliedRequest, opts ...grpc.CallOption) (*Applied, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Applied)
	err := c.cc.Invoke(ctx, StrategyService_GetHistoryApplied_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) ListHistoryApplied(ctx context.Context, in *ListHistoryAppliedRequest, opts ...grpc.CallOption) (*ListHistoryAppliedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHistoryAppliedResponse)
	err := c.cc.Invoke(ctx, StrategyService_ListHistoryApplied_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) DeleteHistoryApplied(ctx context.Context, in *DeleteHistoryAppliedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StrategyService_DeleteHistoryApplied_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StrategyServiceServer is the server API for StrategyService service.
// All implementations must embed UnimplementedStrategyServiceServer
// for forward compatibility.
type StrategyServiceServer interface {
	AddStrategy(context.Context, *Strategy) (*emptypb.Empty, error)
	UpdateStrategy(context.Context, *Strategy) (*emptypb.Empty, error)
	DeleteStrategy(context.Context, *DeleteStrategyRequest) (*emptypb.Empty, error)
	GetStrategy(context.Context, *GetStrategyRequest) (*Strategy, error)
	ListStrategy(context.Context, *ListStrategyRequest) (*ListStrategyResponse, error)
	ApplyStrategy(context.Context, *ApplyStrategyRequest) (*emptypb.Empty, error)
	GetRunningApplied(context.Context, *GetRunningAppliedRequest) (*Applied, error)
	ListRunningApplied(context.Context, *ListRunningAppliedRequest) (*ListRunningAppliedResponse, error)
	GetHistoryApplied(context.Context, *GetHistoryAppliedRequest) (*Applied, error)
	ListHistoryApplied(context.Context, *ListHistoryAppliedRequest) (*ListHistoryAppliedResponse, error)
	DeleteHistoryApplied(context.Context, *DeleteHistoryAppliedRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedStrategyServiceServer()
}

// UnimplementedStrategyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStrategyServiceServer struct{}

func (UnimplementedStrategyServiceServer) AddStrategy(context.Context, *Strategy) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStrategy not implemented")
}
func (UnimplementedStrategyServiceServer) UpdateStrategy(context.Context, *Strategy) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStrategy not implemented")
}
func (UnimplementedStrategyServiceServer) DeleteStrategy(context.Context, *DeleteStrategyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStrategy not implemented")
}
func (UnimplementedStrategyServiceServer) GetStrategy(context.Context, *GetStrategyRequest) (*Strategy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStrategy not implemented")
}
func (UnimplementedStrategyServiceServer) ListStrategy(context.Context, *ListStrategyRequest) (*ListStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStrategy not implemented")
}
func (UnimplementedStrategyServiceServer) ApplyStrategy(context.Context, *ApplyStrategyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyStrategy not implemented")
}
func (UnimplementedStrategyServiceServer) GetRunningApplied(context.Context, *GetRunningAppliedRequest) (*Applied, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunningApplied not implemented")
}
func (UnimplementedStrategyServiceServer) ListRunningApplied(context.Context, *ListRunningAppliedRequest) (*ListRunningAppliedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunningApplied not implemented")
}
func (UnimplementedStrategyServiceServer) GetHistoryApplied(context.Context, *GetHistoryAppliedRequest) (*Applied, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryApplied not implemented")
}
func (UnimplementedStrategyServiceServer) ListHistoryApplied(context.Context, *ListHistoryAppliedRequest) (*ListHistoryAppliedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoryApplied not implemented")
}
func (UnimplementedStrategyServiceServer) DeleteHistoryApplied(context.Context, *DeleteHistoryAppliedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHistoryApplied not implemented")
}
func (UnimplementedStrategyServiceServer) mustEmbedUnimplementedStrategyServiceServer() {}
func (UnimplementedStrategyServiceServer) testEmbeddedByValue()                         {}

// UnsafeStrategyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StrategyServiceServer will
// result in compilation errors.
type UnsafeStrategyServiceServer interface {
	mustEmbedUnimplementedStrategyServiceServer()
}

func RegisterStrategyServiceServer(s grpc.ServiceRegistrar, srv StrategyServiceServer) {
	// If the following call pancis, it indicates UnimplementedStrategyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StrategyService_ServiceDesc, srv)
}

func _StrategyService_AddStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Strategy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).AddStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StrategyService_AddStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).AddStrategy(ctx, req.(*Strategy))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_UpdateStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Strategy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).UpdateStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StrategyService_UpdateStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).UpdateStrategy(ctx, req.(*Strategy))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_DeleteStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).DeleteStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StrategyService_DeleteStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).DeleteStrategy(ctx, req.(*DeleteStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_GetStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).GetStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StrategyService_GetStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).GetStrategy(ctx, req.(*GetStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_ListStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).ListStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StrategyService_ListStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).ListStrategy(ctx, req.(*ListStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_ApplyStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).ApplyStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StrategyService_ApplyStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).ApplyStrategy(ctx, req.(*ApplyStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_GetRunningApplied_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunningAppliedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).GetRunningApplied(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StrategyService_GetRunningApplied_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).GetRunningApplied(ctx, req.(*GetRunningAppliedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_ListRunningApplied_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunningAppliedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).ListRunningApplied(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StrategyService_ListRunningApplied_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).ListRunningApplied(ctx, req.(*ListRunningAppliedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_GetHistoryApplied_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryAppliedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).GetHistoryApplied(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StrategyService_GetHistoryApplied_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).GetHistoryApplied(ctx, req.(*GetHistoryAppliedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_ListHistoryApplied_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHistoryAppliedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).ListHistoryApplied(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StrategyService_ListHistoryApplied_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).ListHistoryApplied(ctx, req.(*ListHistoryAppliedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_DeleteHistoryApplied_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHistoryAppliedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).DeleteHistoryApplied(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StrategyService_DeleteHistoryApplied_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).DeleteHistoryApplied(ctx, req.(*DeleteHistoryAppliedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StrategyService_ServiceDesc is the grpc.ServiceDesc for StrategyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StrategyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strategy.StrategyService",
	HandlerType: (*StrategyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStrategy",
			Handler:    _StrategyService_AddStrategy_Handler,
		},
		{
			MethodName: "UpdateStrategy",
			Handler:    _StrategyService_UpdateStrategy_Handler,
		},
		{
			MethodName: "DeleteStrategy",
			Handler:    _StrategyService_DeleteStrategy_Handler,
		},
		{
			MethodName: "GetStrategy",
			Handler:    _StrategyService_GetStrategy_Handler,
		},
		{
			MethodName: "ListStrategy",
			Handler:    _StrategyService_ListStrategy_Handler,
		},
		{
			MethodName: "ApplyStrategy",
			Handler:    _StrategyService_ApplyStrategy_Handler,
		},
		{
			MethodName: "GetRunningApplied",
			Handler:    _StrategyService_GetRunningApplied_Handler,
		},
		{
			MethodName: "ListRunningApplied",
			Handler:    _StrategyService_ListRunningApplied_Handler,
		},
		{
			MethodName: "GetHistoryApplied",
			Handler:    _StrategyService_GetHistoryApplied_Handler,
		},
		{
			MethodName: "ListHistoryApplied",
			Handler:    _StrategyService_ListHistoryApplied_Handler,
		},
		{
			MethodName: "DeleteHistoryApplied",
			Handler:    _StrategyService_DeleteHistoryApplied_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orch/v1/strategy/strategy.proto",
}
