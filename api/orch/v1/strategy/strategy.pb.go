// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.2
// source: orch/v1/strategy/strategy.proto

package strategy

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AppliedStatus int32

const (
	AppliedStatus_APPLIED_STATUS_UNSPECIFIED AppliedStatus = 0
	AppliedStatus_APPLIED_STATUS_PENDING     AppliedStatus = 1
	AppliedStatus_APPLIED_STATUS_RUNNING     AppliedStatus = 2
	AppliedStatus_APPLIED_STATUS_SUCCESS     AppliedStatus = 3
	AppliedStatus_APPLIED_STATUS_FAILED      AppliedStatus = 4
)

// Enum value maps for AppliedStatus.
var (
	AppliedStatus_name = map[int32]string{
		0: "APPLIED_STATUS_UNSPECIFIED",
		1: "APPLIED_STATUS_PENDING",
		2: "APPLIED_STATUS_RUNNING",
		3: "APPLIED_STATUS_SUCCESS",
		4: "APPLIED_STATUS_FAILED",
	}
	AppliedStatus_value = map[string]int32{
		"APPLIED_STATUS_UNSPECIFIED": 0,
		"APPLIED_STATUS_PENDING":     1,
		"APPLIED_STATUS_RUNNING":     2,
		"APPLIED_STATUS_SUCCESS":     3,
		"APPLIED_STATUS_FAILED":      4,
	}
)

func (x AppliedStatus) Enum() *AppliedStatus {
	p := new(AppliedStatus)
	*p = x
	return p
}

func (x AppliedStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppliedStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_orch_v1_strategy_strategy_proto_enumTypes[0].Descriptor()
}

func (AppliedStatus) Type() protoreflect.EnumType {
	return &file_orch_v1_strategy_strategy_proto_enumTypes[0]
}

func (x AppliedStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppliedStatus.Descriptor instead.
func (AppliedStatus) EnumDescriptor() ([]byte, []int) {
	return file_orch_v1_strategy_strategy_proto_rawDescGZIP(), []int{0}
}

type Strategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NameSelector  string `protobuf:"bytes,2,opt,name=nameSelector,proto3" json:"nameSelector,omitempty"`
	LabelSelector string `protobuf:"bytes,3,opt,name=labelSelector,proto3" json:"labelSelector,omitempty"`
	Action        string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	Value         string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Strategy) Reset() {
	*x = Strategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orch_v1_strategy_strategy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Strategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Strategy) ProtoMessage() {}

func (x *Strategy) ProtoReflect() protoreflect.Message {
	mi := &file_orch_v1_strategy_strategy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Strategy.ProtoReflect.Descriptor instead.
func (*Strategy) Descriptor() ([]byte, []int) {
	return file_orch_v1_strategy_strategy_proto_rawDescGZIP(), []int{0}
}

func (x *Strategy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Strategy) GetNameSelector() string {
	if x != nil {
		return x.NameSelector
	}
	return ""
}

func (x *Strategy) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *Strategy) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Strategy) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type DeleteStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteStrategyRequest) Reset() {
	*x = DeleteStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orch_v1_strategy_strategy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStrategyRequest) ProtoMessage() {}

func (x *DeleteStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orch_v1_strategy_strategy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStrategyRequest.ProtoReflect.Descriptor instead.
func (*DeleteStrategyRequest) Descriptor() ([]byte, []int) {
	return file_orch_v1_strategy_strategy_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteStrategyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetStrategyRequest) Reset() {
	*x = GetStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orch_v1_strategy_strategy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStrategyRequest) ProtoMessage() {}

func (x *GetStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orch_v1_strategy_strategy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStrategyRequest.ProtoReflect.Descriptor instead.
func (*GetStrategyRequest) Descriptor() ([]byte, []int) {
	return file_orch_v1_strategy_strategy_proto_rawDescGZIP(), []int{2}
}

func (x *GetStrategyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagesize int64  `protobuf:"varint,1,opt,name=pagesize,proto3" json:"pagesize,omitempty"`
	Cursor   string `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *ListStrategyRequest) Reset() {
	*x = ListStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orch_v1_strategy_strategy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStrategyRequest) ProtoMessage() {}

func (x *ListStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orch_v1_strategy_strategy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStrategyRequest.ProtoReflect.Descriptor instead.
func (*ListStrategyRequest) Descriptor() ([]byte, []int) {
	return file_orch_v1_strategy_strategy_proto_rawDescGZIP(), []int{3}
}

func (x *ListStrategyRequest) GetPagesize() int64 {
	if x != nil {
		return x.Pagesize
	}
	return 0
}

func (x *ListStrategyRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type ListStrategyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total       int64                `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage   int64                `protobuf:"varint,3,opt,name=totalPage,proto3" json:"totalPage,omitempty"`
	CurrentPage int64                `protobuf:"varint,4,opt,name=currentPage,proto3" json:"currentPage,omitempty"`
	HasNext     bool                 `protobuf:"varint,5,opt,name=hasNext,proto3" json:"hasNext,omitempty"`
	NextCursor  string               `protobuf:"bytes,6,opt,name=nextCursor,proto3" json:"nextCursor,omitempty"`
	Items       map[string]*Strategy `protobuf:"bytes,7,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListStrategyResponse) Reset() {
	*x = ListStrategyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orch_v1_strategy_strategy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStrategyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStrategyResponse) ProtoMessage() {}

func (x *ListStrategyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orch_v1_strategy_strategy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStrategyResponse.ProtoReflect.Descriptor instead.
func (*ListStrategyResponse) Descriptor() ([]byte, []int) {
	return file_orch_v1_strategy_strategy_proto_rawDescGZIP(), []int{4}
}

func (x *ListStrategyResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListStrategyResponse) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *ListStrategyResponse) GetCurrentPage() int64 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *ListStrategyResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (x *ListStrategyResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *ListStrategyResponse) GetItems() map[string]*Strategy {
	if x != nil {
		return x.Items
	}
	return nil
}

type ApplyStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy string `protobuf:"bytes,1,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (x *ApplyStrategyRequest) Reset() {
	*x = ApplyStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orch_v1_strategy_strategy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyStrategyRequest) ProtoMessage() {}

func (x *ApplyStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orch_v1_strategy_strategy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyStrategyRequest.ProtoReflect.Descriptor instead.
func (*ApplyStrategyRequest) Descriptor() ([]byte, []int) {
	return file_orch_v1_strategy_strategy_proto_rawDescGZIP(), []int{5}
}

func (x *ApplyStrategyRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

type Applied struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Agents []string      `protobuf:"bytes,2,rep,name=agents,proto3" json:"agents,omitempty"`
	Action string        `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Value  string        `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Status AppliedStatus `protobuf:"varint,5,opt,name=status,proto3,enum=strategy.AppliedStatus" json:"status,omitempty"`
	Error  []string      `protobuf:"bytes,6,rep,name=error,proto3" json:"error,omitempty"`
}

func (x *Applied) Reset() {
	*x = Applied{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orch_v1_strategy_strategy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Applied) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Applied) ProtoMessage() {}

func (x *Applied) ProtoReflect() protoreflect.Message {
	mi := &file_orch_v1_strategy_strategy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Applied.ProtoReflect.Descriptor instead.
func (*Applied) Descriptor() ([]byte, []int) {
	return file_orch_v1_strategy_strategy_proto_rawDescGZIP(), []int{6}
}

func (x *Applied) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Applied) GetAgents() []string {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *Applied) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Applied) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Applied) GetStatus() AppliedStatus {
	if x != nil {
		return x.Status
	}
	return AppliedStatus_APPLIED_STATUS_UNSPECIFIED
}

func (x *Applied) GetError() []string {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetRunningAppliedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRunningAppliedRequest) Reset() {
	*x = GetRunningAppliedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orch_v1_strategy_strategy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunningAppliedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunningAppliedRequest) ProtoMessage() {}

func (x *GetRunningAppliedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orch_v1_strategy_strategy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunningAppliedRequest.ProtoReflect.Descriptor instead.
func (*GetRunningAppliedRequest) Descriptor() ([]byte, []int) {
	return file_orch_v1_strategy_strategy_proto_rawDescGZIP(), []int{7}
}

func (x *GetRunningAppliedRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListRunningAppliedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagesize int64  `protobuf:"varint,1,opt,name=pagesize,proto3" json:"pagesize,omitempty"`
	Cursor   string `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *ListRunningAppliedRequest) Reset() {
	*x = ListRunningAppliedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orch_v1_strategy_strategy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunningAppliedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunningAppliedRequest) ProtoMessage() {}

func (x *ListRunningAppliedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orch_v1_strategy_strategy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunningAppliedRequest.ProtoReflect.Descriptor instead.
func (*ListRunningAppliedRequest) Descriptor() ([]byte, []int) {
	return file_orch_v1_strategy_strategy_proto_rawDescGZIP(), []int{8}
}

func (x *ListRunningAppliedRequest) GetPagesize() int64 {
	if x != nil {
		return x.Pagesize
	}
	return 0
}

func (x *ListRunningAppliedRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type ListRunningAppliedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total       int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage   int64               `protobuf:"varint,3,opt,name=totalPage,proto3" json:"totalPage,omitempty"`
	CurrentPage int64               `protobuf:"varint,4,opt,name=currentPage,proto3" json:"currentPage,omitempty"`
	HasNext     bool                `protobuf:"varint,5,opt,name=hasNext,proto3" json:"hasNext,omitempty"`
	NextCursor  string              `protobuf:"bytes,6,opt,name=nextCursor,proto3" json:"nextCursor,omitempty"`
	Items       map[string]*Applied `protobuf:"bytes,7,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListRunningAppliedResponse) Reset() {
	*x = ListRunningAppliedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orch_v1_strategy_strategy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunningAppliedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunningAppliedResponse) ProtoMessage() {}

func (x *ListRunningAppliedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orch_v1_strategy_strategy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunningAppliedResponse.ProtoReflect.Descriptor instead.
func (*ListRunningAppliedResponse) Descriptor() ([]byte, []int) {
	return file_orch_v1_strategy_strategy_proto_rawDescGZIP(), []int{9}
}

func (x *ListRunningAppliedResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListRunningAppliedResponse) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *ListRunningAppliedResponse) GetCurrentPage() int64 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *ListRunningAppliedResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (x *ListRunningAppliedResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *ListRunningAppliedResponse) GetItems() map[string]*Applied {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetHistoryAppliedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetHistoryAppliedRequest) Reset() {
	*x = GetHistoryAppliedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orch_v1_strategy_strategy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoryAppliedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryAppliedRequest) ProtoMessage() {}

func (x *GetHistoryAppliedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orch_v1_strategy_strategy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryAppliedRequest.ProtoReflect.Descriptor instead.
func (*GetHistoryAppliedRequest) Descriptor() ([]byte, []int) {
	return file_orch_v1_strategy_strategy_proto_rawDescGZIP(), []int{10}
}

func (x *GetHistoryAppliedRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListHistoryAppliedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagesize int64  `protobuf:"varint,1,opt,name=pagesize,proto3" json:"pagesize,omitempty"`
	Cursor   string `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *ListHistoryAppliedRequest) Reset() {
	*x = ListHistoryAppliedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orch_v1_strategy_strategy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHistoryAppliedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoryAppliedRequest) ProtoMessage() {}

func (x *ListHistoryAppliedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orch_v1_strategy_strategy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoryAppliedRequest.ProtoReflect.Descriptor instead.
func (*ListHistoryAppliedRequest) Descriptor() ([]byte, []int) {
	return file_orch_v1_strategy_strategy_proto_rawDescGZIP(), []int{11}
}

func (x *ListHistoryAppliedRequest) GetPagesize() int64 {
	if x != nil {
		return x.Pagesize
	}
	return 0
}

func (x *ListHistoryAppliedRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type ListHistoryAppliedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total       int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage   int64               `protobuf:"varint,3,opt,name=totalPage,proto3" json:"totalPage,omitempty"`
	CurrentPage int64               `protobuf:"varint,4,opt,name=currentPage,proto3" json:"currentPage,omitempty"`
	HasNext     bool                `protobuf:"varint,5,opt,name=hasNext,proto3" json:"hasNext,omitempty"`
	NextCursor  string              `protobuf:"bytes,6,opt,name=nextCursor,proto3" json:"nextCursor,omitempty"`
	Items       map[string]*Applied `protobuf:"bytes,7,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListHistoryAppliedResponse) Reset() {
	*x = ListHistoryAppliedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orch_v1_strategy_strategy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHistoryAppliedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoryAppliedResponse) ProtoMessage() {}

func (x *ListHistoryAppliedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orch_v1_strategy_strategy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoryAppliedResponse.ProtoReflect.Descriptor instead.
func (*ListHistoryAppliedResponse) Descriptor() ([]byte, []int) {
	return file_orch_v1_strategy_strategy_proto_rawDescGZIP(), []int{12}
}

func (x *ListHistoryAppliedResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListHistoryAppliedResponse) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *ListHistoryAppliedResponse) GetCurrentPage() int64 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *ListHistoryAppliedResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (x *ListHistoryAppliedResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *ListHistoryAppliedResponse) GetItems() map[string]*Applied {
	if x != nil {
		return x.Items
	}
	return nil
}

type DeleteHistoryAppliedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteHistoryAppliedRequest) Reset() {
	*x = DeleteHistoryAppliedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orch_v1_strategy_strategy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHistoryAppliedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHistoryAppliedRequest) ProtoMessage() {}

func (x *DeleteHistoryAppliedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orch_v1_strategy_strategy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHistoryAppliedRequest.ProtoReflect.Descriptor instead.
func (*DeleteHistoryAppliedRequest) Descriptor() ([]byte, []int) {
	return file_orch_v1_strategy_strategy_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteHistoryAppliedRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_orch_v1_strategy_strategy_proto protoreflect.FileDescriptor

var file_orch_v1_strategy_strategy_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6f, 0x72, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x08, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x2b, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x28,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x22, 0xb5, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x4c, 0x0a,
	0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x32, 0x0a, 0x14, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22,
	0xaa, 0x01, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2e, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xc0, 0x02,
	0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x1a, 0x4b, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x2e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x4f, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x22, 0xc0, 0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x12, 0x45, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x4b, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x9e, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x32, 0xdf, 0x06, 0x0a, 0x0f, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0b,
	0x41, 0x64, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x12, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x12, 0x2e, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x3f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x1c, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x4d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x22,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x23, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x22, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x12, 0x5f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x25, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x12, 0x5a, 0x10, 0x6f, 0x72,
	0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_orch_v1_strategy_strategy_proto_rawDescOnce sync.Once
	file_orch_v1_strategy_strategy_proto_rawDescData = file_orch_v1_strategy_strategy_proto_rawDesc
)

func file_orch_v1_strategy_strategy_proto_rawDescGZIP() []byte {
	file_orch_v1_strategy_strategy_proto_rawDescOnce.Do(func() {
		file_orch_v1_strategy_strategy_proto_rawDescData = protoimpl.X.CompressGZIP(file_orch_v1_strategy_strategy_proto_rawDescData)
	})
	return file_orch_v1_strategy_strategy_proto_rawDescData
}

var file_orch_v1_strategy_strategy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_orch_v1_strategy_strategy_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_orch_v1_strategy_strategy_proto_goTypes = []any{
	(AppliedStatus)(0),                  // 0: strategy.AppliedStatus
	(*Strategy)(nil),                    // 1: strategy.Strategy
	(*DeleteStrategyRequest)(nil),       // 2: strategy.DeleteStrategyRequest
	(*GetStrategyRequest)(nil),          // 3: strategy.GetStrategyRequest
	(*ListStrategyRequest)(nil),         // 4: strategy.ListStrategyRequest
	(*ListStrategyResponse)(nil),        // 5: strategy.ListStrategyResponse
	(*ApplyStrategyRequest)(nil),        // 6: strategy.ApplyStrategyRequest
	(*Applied)(nil),                     // 7: strategy.Applied
	(*GetRunningAppliedRequest)(nil),    // 8: strategy.GetRunningAppliedRequest
	(*ListRunningAppliedRequest)(nil),   // 9: strategy.ListRunningAppliedRequest
	(*ListRunningAppliedResponse)(nil),  // 10: strategy.ListRunningAppliedResponse
	(*GetHistoryAppliedRequest)(nil),    // 11: strategy.GetHistoryAppliedRequest
	(*ListHistoryAppliedRequest)(nil),   // 12: strategy.ListHistoryAppliedRequest
	(*ListHistoryAppliedResponse)(nil),  // 13: strategy.ListHistoryAppliedResponse
	(*DeleteHistoryAppliedRequest)(nil), // 14: strategy.DeleteHistoryAppliedRequest
	nil,                                 // 15: strategy.ListStrategyResponse.ItemsEntry
	nil,                                 // 16: strategy.ListRunningAppliedResponse.ItemsEntry
	nil,                                 // 17: strategy.ListHistoryAppliedResponse.ItemsEntry
	(*emptypb.Empty)(nil),               // 18: google.protobuf.Empty
}
var file_orch_v1_strategy_strategy_proto_depIdxs = []int32{
	15, // 0: strategy.ListStrategyResponse.items:type_name -> strategy.ListStrategyResponse.ItemsEntry
	0,  // 1: strategy.Applied.status:type_name -> strategy.AppliedStatus
	16, // 2: strategy.ListRunningAppliedResponse.items:type_name -> strategy.ListRunningAppliedResponse.ItemsEntry
	17, // 3: strategy.ListHistoryAppliedResponse.items:type_name -> strategy.ListHistoryAppliedResponse.ItemsEntry
	1,  // 4: strategy.ListStrategyResponse.ItemsEntry.value:type_name -> strategy.Strategy
	7,  // 5: strategy.ListRunningAppliedResponse.ItemsEntry.value:type_name -> strategy.Applied
	7,  // 6: strategy.ListHistoryAppliedResponse.ItemsEntry.value:type_name -> strategy.Applied
	1,  // 7: strategy.StrategyService.AddStrategy:input_type -> strategy.Strategy
	1,  // 8: strategy.StrategyService.UpdateStrategy:input_type -> strategy.Strategy
	2,  // 9: strategy.StrategyService.DeleteStrategy:input_type -> strategy.DeleteStrategyRequest
	3,  // 10: strategy.StrategyService.GetStrategy:input_type -> strategy.GetStrategyRequest
	4,  // 11: strategy.StrategyService.ListStrategy:input_type -> strategy.ListStrategyRequest
	6,  // 12: strategy.StrategyService.ApplyStrategy:input_type -> strategy.ApplyStrategyRequest
	8,  // 13: strategy.StrategyService.GetRunningApplied:input_type -> strategy.GetRunningAppliedRequest
	9,  // 14: strategy.StrategyService.ListRunningApplied:input_type -> strategy.ListRunningAppliedRequest
	11, // 15: strategy.StrategyService.GetHistoryApplied:input_type -> strategy.GetHistoryAppliedRequest
	12, // 16: strategy.StrategyService.ListHistoryApplied:input_type -> strategy.ListHistoryAppliedRequest
	14, // 17: strategy.StrategyService.DeleteHistoryApplied:input_type -> strategy.DeleteHistoryAppliedRequest
	18, // 18: strategy.StrategyService.AddStrategy:output_type -> google.protobuf.Empty
	18, // 19: strategy.StrategyService.UpdateStrategy:output_type -> google.protobuf.Empty
	18, // 20: strategy.StrategyService.DeleteStrategy:output_type -> google.protobuf.Empty
	1,  // 21: strategy.StrategyService.GetStrategy:output_type -> strategy.Strategy
	5,  // 22: strategy.StrategyService.ListStrategy:output_type -> strategy.ListStrategyResponse
	18, // 23: strategy.StrategyService.ApplyStrategy:output_type -> google.protobuf.Empty
	7,  // 24: strategy.StrategyService.GetRunningApplied:output_type -> strategy.Applied
	10, // 25: strategy.StrategyService.ListRunningApplied:output_type -> strategy.ListRunningAppliedResponse
	7,  // 26: strategy.StrategyService.GetHistoryApplied:output_type -> strategy.Applied
	13, // 27: strategy.StrategyService.ListHistoryApplied:output_type -> strategy.ListHistoryAppliedResponse
	18, // 28: strategy.StrategyService.DeleteHistoryApplied:output_type -> google.protobuf.Empty
	18, // [18:29] is the sub-list for method output_type
	7,  // [7:18] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_orch_v1_strategy_strategy_proto_init() }
func file_orch_v1_strategy_strategy_proto_init() {
	if File_orch_v1_strategy_strategy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_orch_v1_strategy_strategy_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Strategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orch_v1_strategy_strategy_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orch_v1_strategy_strategy_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orch_v1_strategy_strategy_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ListStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orch_v1_strategy_strategy_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ListStrategyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orch_v1_strategy_strategy_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ApplyStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orch_v1_strategy_strategy_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Applied); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orch_v1_strategy_strategy_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetRunningAppliedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orch_v1_strategy_strategy_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ListRunningAppliedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orch_v1_strategy_strategy_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ListRunningAppliedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orch_v1_strategy_strategy_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetHistoryAppliedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orch_v1_strategy_strategy_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ListHistoryAppliedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orch_v1_strategy_strategy_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ListHistoryAppliedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orch_v1_strategy_strategy_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteHistoryAppliedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orch_v1_strategy_strategy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_orch_v1_strategy_strategy_proto_goTypes,
		DependencyIndexes: file_orch_v1_strategy_strategy_proto_depIdxs,
		EnumInfos:         file_orch_v1_strategy_strategy_proto_enumTypes,
		MessageInfos:      file_orch_v1_strategy_strategy_proto_msgTypes,
	}.Build()
	File_orch_v1_strategy_strategy_proto = out.File
	file_orch_v1_strategy_strategy_proto_rawDesc = nil
	file_orch_v1_strategy_strategy_proto_goTypes = nil
	file_orch_v1_strategy_strategy_proto_depIdxs = nil
}
